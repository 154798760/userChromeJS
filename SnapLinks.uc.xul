<?xml version="1.0"?>
<!DOCTYPE overlay>
<!--
// ==UserScript==
// @name           SnapLinks.uc.xul
// @namespace      http://d.hatena.ne.jp/Griever/
// @description    Snap Links for userChromeJS
// @include        main
// @version        2012/03/08 
// @note           フレーム跨いだりツールチップ使うのをやめた
// ==/UserScript==
 -->
<!--

FireGestures や keyconfig で snapLinks(); を実行

引数に eventを送るとすぐに四角を描くようになる（MouseEvent限定）
snapLinks(event);

-->
<?xml-stylesheet href="data:text/css,@namespace%20url('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul');

#snapLinksMenupopup.hasLink .hasLink,
#snapLinksMenupopup.hasImageLink .hasImageLink,
#snapLinksMenupopup.hasCheckbox .hasCheckbox
  { display: -moz-box !important; }

#snapLinksMenupopup:not(.hasLink) .hasLink,
#snapLinksMenupopup:not(.hasImageLink) .hasImageLink,
#snapLinksMenupopup:not(.hasCheckbox) .hasCheckbox 
  { display: none !important; }

" type="text/css"?>

<overlay id="SnapLinks_overlay"  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<popupset id="mainPopupSet">
		<menupopup id="snapLinksMenupopup"
			        onpopuphidden="this.className = ''; window.snap.lowlightAll();">
			<menuitem label="リンクを新しいタブで開く"
			          class="hasLink"
			          oncommand="snap.openLinks();" />
			<menuitem label="リンクの URL をコピー"
			          class="hasLink"
			          oncommand="snap.copyLinks();" />
			<menuitem label="画像リンクを新しいタブで開く" hidden="true"
			          class="hasImageLink"
			          oncommand="snap.openLinks(/\.(jpe?g|png|gif|bmp)$/i);" />
			<menuitem label="画像リンクをひとつのタブで開く"
			          class="hasImageLink"
			          oncommand="snap.imageOnePage();" />
			<menuseparator class="hasLink hasCheckbox" />
			<menuitem label="チェックボックスを ON にする"
			          class="hasCheckbox"
			          oncommand="snap.checkbox(true);" />
			<menuitem label="チェックボックスを OFF にする"
			          class="hasCheckbox"
			          oncommand="snap.checkbox(false);" />
			<menuitem label="チェックボックスをトグル"
			          class="hasCheckbox"
			          oncommand="snap.checkbox();" />
		</menupopup>
	</popupset>
	<script type="application/x-javascript" xmlns="http://www.w3.org/1999/xhtml"><![CDATA[

window.snap = null;
window.snapLinks = function snapLinks(aEvent){
	if (window.snap) {
		window.snap.destroy();
	}
	window.snap = new SnapLinksUCJSClass(aEvent);
}


window.SnapLinksUCJSClass = function(aEvent){
	this.init.apply(this, arguments);
};
window.SnapLinksUCJSClass.prototype = {
	timer: null,
	button: 0,
	getFocusedWindow: function(aEvent) {
		var win = aEvent && aEvent.view? aEvent.view : document.commandDispatcher.focusedWindow;
		if (!win || win == window || win.document instanceof XULDocument)
			win = content;
		return win;
	},
	init: function(aEvent) {
		this.win = this.getFocusedWindow(aEvent);
		this.doc = this.win.document;
		this.body = this.doc.body;
		this.root = this.doc.documentElement;
		this.utils = this.win.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindowUtils);
		this.popup = document.getElementById("snapLinksMenupopup");

		this.bodyCursor = this.body.style.cursor;
		this.rootCursor = this.root.style.cursor;
		this.body.style.setProperty("cursor", "crosshair", "important");
		this.root.style.setProperty("cursor", "crosshair", "important");

		this.highlights = [];
		this.elements = [];
		if (aEvent instanceof MouseEvent) {
			this.button = 0;
			this.draw(aEvent);
		} else {
			this.doc.addEventListener("mousedown", this, true);
		}
	},
	uninit: function() {
		this.doc.removeEventListener("mousedown", this, true);
		this.doc.removeEventListener("mousemove", this, true);
		removeEventListener("mouseup", this, true);
		setTimeout(function(self){
			self.doc.removeEventListener("click", self, true);
		}, 10, this);

		if (this.box && this.box.parentNode)
			this.box.parentNode.removeChild(this.box);
		this.box = null;
		this.body.style.cursor = this.bodyCursor;
		this.root.style.cursor = this.rootCursor;
	},
	destroy: function() {
		this.uninit();
		this.lowlightAll();
	},
	handleEvent: function(event) {
		switch(event.type){
			case "mousedown":
				if (event.button != 0 || event.ctrlKey || event.shiftKey || event.altKey) return;
				event.preventDefault();
				event.stopPropagation();

				this.draw(event);
				break;
			case "mousemove":
				event.preventDefault();
				event.stopPropagation();
				var moveX = event.pageX;
				var moveY = event.pageY;
				if (this.downX > moveX) this.box.style.left = moveX + "px";
				if (this.downY > moveY) this.box.style.top  = moveY + "px";
				this.box.style.width  = Math.abs(moveX - this.downX) + "px";
				this.box.style.height = Math.abs(moveY - this.downY) + "px";

				if (this.timer) {
					clearTimeout(this.timer);
					this.timer = null;
				}
				var timeStamp = new Date().getTime();
				if (timeStamp - this.lastHiglightedTime > 150) {
					this.boxRect = this.box.getBoundingClientRect();
					this.highlightAll();
				} else {
					var self = this;
					this.timer = setTimeout(function() {
						self.boxRect = self.box.getBoundingClientRect();
						self.highlightAll();
					}, 200);
				}
				break;
			case "mouseup":
				if (event.button != this.button || event.ctrlKey || event.shiftKey) return;
				event.preventDefault();
				event.stopPropagation();

				if (this.timer) {
					clearTimeout(this.timer);
					this.timer = null;
				}
				this.boxRect = this.box.getBoundingClientRect();
				this.highlightAll();

				for (let [i, e] in Iterator(this.highlights)) {
					if (e instanceof HTMLImageElement) {
						let link = this.doc.evaluate(
							'ancestor::*[@href]', e, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
						if (this.highlights.indexOf(link) === -1) {
							this.elements[this.elements.length] = link;
						}
						continue;
					}
					this.elements[this.elements.length] = e;
				}
				this.elements = this.elements;
				this.uninit();
				this.showPopup(event);
				break;
			case "click":
				event.preventDefault();
				event.stopPropagation();
				break;
		}
	},
	draw: function(aEvent) {
		this.lastHiglightedTime = new Date().getTime();
		this.downX = aEvent.pageX;
		this.downY = aEvent.pageY;
		this.box = this.doc.createElement("div");
		this.box.id = "snap-links-box";
		this.box.style.cssText = [
			'background-color: rgba(0,128,255,.1) !important;'
			,'border: 1px solid rgb(255,255,0) !important;'
			,'box-sizing: border-box !important;'
			,'-moz-box-sizing: border-box !important;'
			,'position: absolute !important;'
			,'z-index: 2147483647 !important;'
			,'top:' + this.downY + 'px;'
			,'left:' + this.downX + 'px;'
			,'cursor: crosshair !important;'
			,'margin: 0px !important;'
			,'padding: 0px !important;'
			,'outline: none !important;'
		].join(" ");
		this.body.appendChild(this.box);

		this.doc.removeEventListener("mousedown", this, true);
		this.doc.addEventListener("mousemove", this, true);
		addEventListener("mouseup", this, true);
		this.doc.addEventListener("click", this, true);
	},
	highlightAll: function() {
		var a = '[href]:not([href^="javascript:"]):not([href^="mailto:"]):not([href^="#"])';
		var selector = a + ', ' + a + ' img, input[type="checkbox"]';

		var contains = this.getContainsElements();
		var matches = [];
		for (let [i, e] in Iterator(contains)) {
			if (e.nodeType !== 1 || !e.mozMatchesSelector(selector))
				continue;

			if (e.hasAttribute('href')) {
				let imgs = Array.slice(e.getElementsByTagName('img'));
				if (imgs[0]) {
					[].push.apply(contains, imgs);
					continue;
				}
			}

			if (!("defStyle" in e))
				this.highlight(e);
			matches[matches.length] = e;
		}

		this.highlights.forEach(function(e, i, a){
			if (matches.indexOf(e) === -1)
				this.lowlight(e);
		}, this);

		this.highlights = matches;
		this.lastHiglightedTime = new Date().getTime();
	},
	lowlightAll: function() {
		this.highlights.forEach(function(e){
			this.lowlight(e);
		}, this);
	},
	highlight: function(elem) {
		if (!('defStyle' in elem))
			elem.defStyle = elem.getAttribute('style');
		elem.style.setProperty('outline', '2px solid #ff0000', 'important');
		elem.style.setProperty('outline-offset', '-1px', 'important');
	},
	lowlight: function(elem) {
		if ("defStyle" in elem) {
			elem.defStyle?
				elem.style.cssText = elem.defStyle:
				elem.removeAttribute("style");
			delete elem.defStyle;
		}
	},
	getContainsElements: function() {
		if (!this.boxRect) return;
		var { top, right, bottom, left, width, height } = this.boxRect;
		// http://piro.sakura.ne.jp/latest/blosxom/mozilla/xul/2010-07-07_nodesfromrect.htm
		// nsIDOMNodeList nodesFromRect(in float aX,
		//                              in float aY,
		//                              in float aTopSize, 
		//                              in float aRightSize,
		//                              in float aBottomSize,
		//                              in float aLeftSize,
		//                              in boolean aIgnoreRootScrollFrame,
		//                              in boolean aFlushLayout);
		return Array.slice(this.utils.nodesFromRect(left, top, 0, width, height, 0, true, false));
	},


	showPopup: function(aEvent) {
		var cls = [];
		if (this.elements.some(function(e) e instanceof HTMLAnchorElement))
			cls.push("hasLink");
		if (this.elements.some(function(e) e instanceof HTMLAnchorElement && /\.(?:jpe?g|png|gif)$/i.test(e.href)))
			cls.push("hasImageLink");
		if (this.elements.some(function(e) e instanceof HTMLInputElement && e.type === 'checkbox'))
			cls.push("hasCheckbox");

		if (cls.length > 0) {
			this.popup.className = cls.join(' ');
			this.popup.openPopupAtScreen(aEvent.screenX, aEvent.screenY);
		} else {
			this.lowlightAll();
		}
	},
	openLinks : function(regexp){
		var obj = {};
		for (let [i, elem] in Iterator(this.elements)) {
			if (!elem.href || /^(?:javascript:|mailto:|#)/i.test(elem.href)) continue;
			if (!regexp || regexp.test(elem.href)) 
				obj[elem.href] = true;
		}
		for (let [key, val] in Iterator(obj)) {
			gBrowser.addTab(key, { ownerTab: gBrowser.mCurrentTab });
		}
	},
	copyLinks : function(regexp){
		var links = this.elements.filter(function(elem){
			return elem instanceof HTMLAnchorElement && (!regexp || regexp.test(elem.href))
		}).map(function(e) e.href);
		if (links.length){
			Cc["@mozilla.org/widget/clipboardhelper;1"].getService(Ci.nsIClipboardHelper).copyString(links.join('\n'));
		}
	},
	imageOnePage : function(){
		var htmlsrc = [
			'<style>'
			,'img { max-width: 100%; max-height: 100%; }'
			,'</style>'].join('');
		for (let [i, elem] in Iterator(this.elements)) {
			if (elem instanceof HTMLAnchorElement && /\.(jpe?g|png|gif|bmp)$/i.test(elem.href))
				htmlsrc += '\n<img src="' + elem.href + '">'
		}
		gBrowser.addTab("data:text/html;charset=utf-8," + 
			'<html><head><title>' + this.doc.domain + ' \u306E\u753B\u50CF\u4E00\u89A7</title><body>' + 
			encodeURIComponent(htmlsrc));
	},
	checkbox : function(bool){
		for (let [i, elem] in Iterator(this.elements)) {
			if (elem instanceof HTMLInputElement && elem.type === 'checkbox') {
				elem.checked = arguments.length == 0?
					!elem.checked :
					bool;
			}
		}
	},
};

	]]></script>
</overlay>
